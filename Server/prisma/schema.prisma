// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// model Users {
//   id         Int      @id @default(autoincrement())
//   first_name String
//   last_name  String
//   email      String   @unique(map: "Users_email_key")
//   password   String
//   phone      String
//   id_card    String
//   role       String   @default("user")
//   enabled    Boolean  @default(true)
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   // back-relations
//   carts        Cart[]
//   reviews      ProductReview[]
//   orderhistory orderhistory[]
//   PasswordOTP  PasswordOTP[]

//   orders         Order[] @relation("UserOrders")
//   canceledOrders Order[] @relation("UserCanceledOrders")
// }

// model Category {
//   id        Int      @id @default(autoincrement())
//   name      String   @unique(map: "Category_name_key")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // back-relations
//   products Product[]
// }

// model Size {
//   id        Int      @id @default(autoincrement())
//   name      String   @unique(map: "Size_name_key")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   variants ProductVariant[]
// }

// model Generation {
//   id        Int      @id @default(autoincrement())
//   name      String   @unique(map: "Generation_name_key")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   variants ProductVariant[]
// }

// model Product {
//   id          Int      @id @default(autoincrement())
//   title       String
//   description String
//   price       Float
//   sold        Int      @default(0)
//   quantity    Int
//   categoryId  Int?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   // ‚òÖ ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏£‡∏ï‡∏ï‡∏¥‡πâ‡∏á (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ ‡∏•‡∏ö‡∏™‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ)
//   ratingAvg   Float @default(0)
//   ratingCount Int   @default(0)

//   // relations
//   category Category?        @relation(fields: [categoryId], references: [id])
//   images   Image[]
//   variants ProductVariant[]
//   reviews  ProductReview[]

//   @@index([categoryId], map: "Product_categoryId_idx")
// }

// model ProductVariant {
//   id           Int      @id @default(autoincrement())
//   productId    Int
//   sizeId       Int
//   generationId Int?
//   quantity     Int
//   sku          String?  @unique(map: "ProductVariant_sku_key")
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   product    Product     @relation(fields: [productId], references: [id])
//   size       Size        @relation(fields: [sizeId], references: [id])
//   generation Generation? @relation(fields: [generationId], references: [id])

//   orders  ProductOnOrder[]
//   carts   ProductOnCart[]
//   reviews ProductReview[]

//   @@unique([productId, sizeId, generationId], map: "ProductVariant_productId_sizeId_generationId_key")
//   @@index([productId], map: "ProductVariant_productId_idx")
//   @@index([sizeId], map: "ProductVariant_sizeId_idx")
//   @@index([generationId], map: "ProductVariant_generationId_idx")
// }

// model Order {
//   id          Int      @id @default(autoincrement())
//   cartTotal   Float
//   orderStatus String   @default("Not Process")
//   orderById   Int
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   cancelReason String? // ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏≠‡∏á"
//   cancelNote   String? // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å modal
//   canceledAt   DateTime? // ‡πÄ‡∏ß‡∏•‡∏≤/‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
//   canceledById Int? // (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô) ‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏Å‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å

//   pickupPlace String?
//   pickupAt    DateTime?
//   pickupNote  String?

//   orderBuy   Users  @relation("UserOrders", fields: [orderById], references: [id])
//   canceledBy Users? @relation("UserCanceledOrders", fields: [canceledById], references: [id])

//   products ProductOnOrder[]

//   @@index([orderById], map: "Order_orderById_idx")
//   @@index([orderStatus]) // üëâ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤/‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
//   @@index([canceledAt]) // üëâ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
// }

// model ProductOnOrder {
//   id             Int     @id @default(autoincrement())
//   orderId        Int
//   variantId      Int
//   productTitle   String
//   sizeName       String
//   generationName String?
//   price          Float
//   count          Int

//   order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   variant ProductVariant @relation(fields: [variantId], references: [id])

//   @@index([orderId], map: "ProductOnOrder_orderId_idx")
//   @@index([variantId], map: "ProductOnOrder_variantId_idx")
// }

// model Cart {
//   id        Int      @id @default(autoincrement())
//   cartTotal Float
//   orderById Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   orderBuy Users           @relation(fields: [orderById], references: [id])
//   products ProductOnCart[]

//   @@index([orderById], map: "Cart_orderById_idx")
// }

// model ProductOnCart {
//   id             Int     @id @default(autoincrement())
//   cartId         Int
//   variantId      Int
//   productTitle   String
//   sizeName       String
//   generationName String?
//   price          Float
//   count          Int

//   cart    Cart           @relation(fields: [cartId], references: [id])
//   variant ProductVariant @relation(fields: [variantId], references: [id])

//   @@index([cartId], map: "ProductOnCart_cartId_idx")
//   @@index([variantId], map: "ProductOnCart_variantId_idx")
// }

// model Image {
//   id         Int      @id @default(autoincrement())
//   asset_id   String
//   public_id  String
//   url        String
//   secure_url String
//   productId  Int
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   product Product @relation(fields: [productId], references: [id])

//   @@index([productId], map: "Image_productId_idx")
// }

// model ProductReview {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   productId Int
//   variantId Int?
//   rating    Int
//   text      String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user    Users           @relation(fields: [userId], references: [id])
//   product Product         @relation(fields: [productId], references: [id])
//   variant ProductVariant? @relation(fields: [variantId], references: [id])

//   @@unique([userId, productId, variantId], map: "Review_unique_per_user_product_variant")
//   @@index([productId], map: "Review_productId_idx")
//   @@index([variantId], map: "Review_variantId_idx")
// }

// model orderhistory {
//   id          Int      @id @default(autoincrement())
//   userId      Int
//   orderId     Int? // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô null ‡∏ñ‡πâ‡∏≤‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
//   cartTotal   Float
//   orderStatus String
//   products    Json // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON snapshot
//   createdAt   DateTime // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏î
//   archivedAt  DateTime @default(now()) // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥

//   user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([userId, orderId], map: "OrderHistory_user_order_unique")
// }

// model PasswordOTP {
//   id        Int       @id @default(autoincrement())
//   userId    Int
//   codeHash  String
//   purpose   String    @default("reset") // ‡πÉ‡∏ä‡πâ "reset" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
//   attempts  Int       @default(0) // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°
//   expiresAt DateTime
//   createdAt DateTime  @default(now())
//   usedAt    DateTime?

//   user Users @relation(fields: [userId], references: [id])

//   @@index([userId, expiresAt])
// }

// model EmailOtp {
//   id         Int      @id @default(autoincrement())
//   email      String   @unique
//   codeHash   String
//   expiresAt  DateTime
//   attempts   Int      @default(0)
//   lastSentAt DateTime @default(now())
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@index([expiresAt])
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Setting {
  key   String @id
  value String
}

/**
 * ===================== ENUMS =====================
 */
enum Role {
  user
  admin
}

enum OrderStatus {
  PENDING   @map("‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß")
  CONFIRMED @map("‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏£‡∏±‡∏ö")
  COMPLETED @map("‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
  CANCELED  @map("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
}

enum OtpPurpose {
  reset
}

/**
 * ===================== MODELS =====================
 */
model Users {
  id         Int    @id @default(autoincrement()) @db.UnsignedInt
  first_name String @db.VarChar(100)
  last_name  String @db.VarChar(100)
  email      String @unique(map: "Users_email_key") @db.VarChar(254)
  // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô bcrypt hash ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ñ‡∏á‡∏ó‡∏µ‡πà 60
  password   String @db.Char(60)
  // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÑ‡∏ó‡∏¢ 10 ‡∏´‡∏•‡∏±‡∏Å (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏µ‡∏î) ‚Äî ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏Ç‡∏µ‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô VarChar(12-13) ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
  phone      String @db.Char(10)
  // ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ‚Äú‡∏°‡∏µ‡∏Ç‡∏µ‡∏î‚Äù ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 17 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ (‡πÄ‡∏ä‡πà‡∏ô X-XXXX-XXXXX-XX-X)
  id_card    String @db.Char(17)

  role      Role     @default(user)
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bannedAt   DateTime?
  banReason  String?   @db.VarChar(300)
  bannedById Int?      @db.UnsignedInt
  bannedBy   Users?    @relation("UserBannedBy", fields: [bannedById], references: [id])
  bansMade   Users[]   @relation("UserBannedBy") 

  // back-relations
  carts       Cart[]
  reviews     ProductReview[]
  PasswordOTP PasswordOTP[]

  orders         Order[] @relation("UserOrders")
  canceledOrders Order[] @relation("UserCanceledOrders")

  @@index([bannedAt], map: "Users_bannedAt_idx")
  @@index([bannedById], map: "Users_bannedById_idx") 
}

model Category {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String   @unique(map: "Category_name_key") @db.VarChar(80)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // back-relations
  products Product[]
}

model Size {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String   @unique(map: "Size_name_key") @db.VarChar(20)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variants ProductVariant[]
}

model Generation {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  name      String   @unique(map: "Generation_name_key") @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  variants ProductVariant[]
}

model Product {
  id          Int      @id @default(autoincrement()) @db.UnsignedInt
  title       String   @db.VarChar(150)
  // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏≤‡∏à‡∏¢‡∏≤‡∏ß ‡πÉ‡∏ä‡πâ Text
  description String   @db.Text
  // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ä‡πâ Decimal ‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á float
  price       Decimal  @db.Decimal(10, 2)
  sold        Int      @default(0) @db.UnsignedInt
  quantity    Int      @db.UnsignedInt
  categoryId  Int?     @db.UnsignedInt
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // ‚òÖ ‡πÄ‡∏£‡∏ï‡∏ï‡∏¥‡πâ‡∏á‡∏£‡∏ß‡∏°
  ratingAvg   Decimal @default(0) @db.Decimal(3, 2) // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 0.00‚Äì5.00
  ratingCount Int     @default(0) @db.UnsignedInt

  // relations
  category Category?        @relation(fields: [categoryId], references: [id])
  images   Image[]
  variants ProductVariant[]
  reviews  ProductReview[]

  @@index([categoryId], map: "Product_categoryId_idx")
}

model ProductVariant {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  productId    Int      @db.UnsignedInt
  sizeId       Int      @db.UnsignedInt
  generationId Int?     @db.UnsignedInt
  quantity     Int      @db.UnsignedInt
  sku          String?  @unique(map: "ProductVariant_sku_key") @db.VarChar(64)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  lowStockThreshold Int? @db.UnsignedInt

  product    Product     @relation(fields: [productId], references: [id])
  size       Size        @relation(fields: [sizeId], references: [id])
  generation Generation? @relation(fields: [generationId], references: [id])

  orders  ProductOnOrder[]
  carts   ProductOnCart[]
  reviews ProductReview[]

  @@unique([productId, sizeId, generationId], map: "ProductVariant_productId_sizeId_generationId_key")
  @@index([productId], map: "ProductVariant_productId_idx")
  @@index([sizeId], map: "ProductVariant_sizeId_idx")
  @@index([generationId], map: "ProductVariant_generationId_idx")
}

model Order {
  id          Int         @id @default(autoincrement()) @db.UnsignedInt
  cartTotal   Decimal     @db.Decimal(12, 2)
  orderStatus OrderStatus @default(PENDING)
  orderById   Int         @db.UnsignedInt
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  cancelReason String?   @db.VarChar(120) // ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏≠‡∏á"
  cancelNote   String?   @db.VarChar(500) // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å modal
  canceledAt   DateTime?
  canceledById Int?      @db.UnsignedInt

  pickupPlace String?   @db.VarChar(120)
  pickupAt    DateTime?
  pickupNote  String?   @db.VarChar(300)

  orderBuy   Users  @relation("UserOrders", fields: [orderById], references: [id])
  canceledBy Users? @relation("UserCanceledOrders", fields: [canceledById], references: [id])

  products      ProductOnOrder[]
  ProductReview ProductReview[]

  @@index([orderById], map: "Order_orderById_idx")
  @@index([orderStatus], map: "Order_status_idx")
  @@index([canceledAt], map: "Order_canceledAt_idx")
}

model ProductOnOrder {
  id             Int     @id @default(autoincrement()) @db.UnsignedInt
  orderId        Int     @db.UnsignedInt
  variantId      Int     @db.UnsignedInt
  productTitle   String  @db.VarChar(150)
  sizeName       String  @db.VarChar(20)
  generationName String? @db.VarChar(50)
  price          Decimal @db.Decimal(10, 2)
  count          Int     @db.UnsignedInt

  order   Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@index([orderId], map: "ProductOnOrder_orderId_idx")
  @@index([variantId], map: "ProductOnOrder_variantId_idx")
}

model Cart {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  cartTotal Decimal  @db.Decimal(12, 2)
  orderById Int      @db.UnsignedInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderBuy Users           @relation(fields: [orderById], references: [id])
  products ProductOnCart[]

  @@index([orderById], map: "Cart_orderById_idx")
}

model ProductOnCart {
  id             Int     @id @default(autoincrement()) @db.UnsignedInt
  cartId         Int     @db.UnsignedInt
  variantId      Int     @db.UnsignedInt
  productTitle   String  @db.VarChar(150)
  sizeName       String  @db.VarChar(20)
  generationName String? @db.VarChar(50)
  price          Decimal @db.Decimal(10, 2)
  count          Int     @db.UnsignedInt

  cart    Cart           @relation(fields: [cartId], references: [id])
  variant ProductVariant @relation(fields: [variantId], references: [id])

  @@index([cartId], map: "ProductOnCart_cartId_idx")
  @@index([variantId], map: "ProductOnCart_variantId_idx")
}

model Image {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  asset_id   String   @db.VarChar(255)
  public_id  String   @db.VarChar(255)
  // URL ‡∏≠‡∏≤‡∏à‡∏¢‡∏≤‡∏ß ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ú‡∏∑‡πà‡∏≠ 2KB
  url        String   @db.VarChar(1024)
  secure_url String   @db.VarChar(1024)
  productId  Int      @db.UnsignedInt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@index([productId], map: "Image_productId_idx")
}

model ProductReview {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  userId    Int      @db.UnsignedInt
  productId Int      @db.UnsignedInt
  variantId Int?     @db.UnsignedInt
  orderId   Int?     @db.UnsignedInt
  // 1‚Äì5 ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡πà‡∏ß‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏≠‡∏õ‡∏î‡πâ‡∏ß‡∏¢
  rating    Int      @db.UnsignedInt
  text      String?  @db.VarChar(600)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    Users           @relation(fields: [userId], references: [id])
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])
  order   Order?          @relation(fields: [orderId], references: [id])

  @@unique([userId, productId, variantId, orderId], map: "Review_unique_per_user_variant_order")
  @@index([productId], map: "Review_productId_idx")
  @@index([variantId], map: "Review_variantId_idx")
  @@index([orderId], map: "Review_orderId_idx")
}

model PasswordOTP {
  id        Int        @id @default(autoincrement()) @db.UnsignedInt
  userId    Int        @db.UnsignedInt
  codeHash  String     @db.VarChar(255)
  purpose   OtpPurpose @default(reset)
  attempts  Int        @default(0) @db.UnsignedInt
  expiresAt DateTime
  createdAt DateTime   @default(now())
  usedAt    DateTime?

  user Users @relation(fields: [userId], references: [id])

  @@index([userId, expiresAt], map: "PasswordOTP_user_exp_idx")
}

model EmailOtp {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  email      String   @unique @db.VarChar(254)
  codeHash   String   @db.VarChar(255)
  expiresAt  DateTime
  attempts   Int      @default(0) @db.UnsignedInt
  lastSentAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([expiresAt], map: "EmailOtp_expires_idx")
}
